{smcl}
{* 27jun2001}{...}
{hline}
help for {hi:permute}
{hline}

{title:Monte Carlo permutation tests}

{p 8 12}{cmd:permute} {it:progname} {it:varname1} [{it:varlist}]
[{cmd:,} {cmd:by}{cmd:(}{it:groupvars}{cmd:)} 
{cmdab:r:eps}{cmd:(}{it:#}{cmd:)} {cmdab:di:splay}{cmd:(}{it:#}{cmd:)}
{cmdab:le:ft} {cmdab:ri:ght} {cmdab:nop:rob} {cmd:eps}{cmd:(}{it:#}{cmd:)}
{cmd:post}{cmd:(}{it:filename}{cmd:)} {cmdab:do:uble} 
{cmdab:ev:ery}{cmd:(}{it:#}{cmd:)} {cmd:replace} {cmd:leavemore} ] 

{title:Description}

{p} {cmd: permute}
estimates p-values for permutation tests based on Monte Carlo
simulations.

{p} {it: progname}
is the name of a program that computes the test statistic and places
its value in the global macro {cmd: S_1}.  
The arguments to {it:progname} are {it: varname1}
and {it: varlist}.

{p} For each repetition, the values of {it: varname1}
are randomly permuted, {it:progname} is
called to compute the test statistic, and a count is kept whether this value
of the test statistic is more extreme than the observed test statistic.

{p} The values of the test statistic for each random permutation can also be
stored in a dataset using the {cmd: post()} option.

{title:Options}

{p 0 4}{cmd:by}{cmd:(}{it:groupvars}{cmd:)} specifies that the 
permutations be performed within each group
defined by the values of {it:groupvars}; i.e., group membership is fixed and
the values of {it:varname1} are independently permuted within each group.  For
example, this permutation scheme is used for randomized-block anova to
permute values within each block.

{p 0 4}{cmd:reps}{cmd:(}{it:#}{cmd:)} specifies the number of random 
permutations to perform.  The default is 100.

{p 0 4}{cmd:display}{cmd:(}{it:#}{cmd:)} displays output every {it:#}-th 
random permutation.  The default is 10.
{cmd:display(0)} suppresses all but the final output.

{p 0 4}{cmd:left} | {cmd:right} request that one-sided p-values be computed.  
If {cmd:left} is
specified, an estimate of Pr(T <= T(obs)) is produced, where T is the test
statistic and T(obs) is its observed value.  If {cmd:right} is specified, an
estimate of Pr(T >= T(obs)) is produced.  By default, two-sided p-values
are computed; i.e., Pr(|T| >= |T(obs)|) is estimated.

{p 0 4}{cmd:noprob} specifies that no p-values are to be computed.

{p 0 4}{cmd:eps}{cmd:(}{it:#}{cmd:)} specifies the numerical tolerance for 
testing |T| >= |T(obs)|,
T <= T(obs), or T >= T(obs).  These are considered true if, respectively,
|T| >= |T(obs)| - {it:#}, T <= T(obs) + {it:#}, or T >= T(obs) - {it:#}.  
By default, it
is 1e-7.  {cmd:eps()} should not have to be set under normal circumstances.

{p 0 4}{cmd:post}{cmd:(}{it:filename}{cmd:)} specifies a name of a 
{cmd:.dta} file that will be created holding
the values of the test statistic computed for each random permutation.

{p 0 4}{cmd:double} can only be specified when using {cmd:post()}.  
It specifies that the values
of the test statistic be stored as type {cmd: double}; default is type 
{cmd:float}.
See help {help datatypes}.

{p 0 4}{cmd:every}{cmd:(}{it:#}{cmd:)} can only be specified when using 
{cmd:post()}.  It specifies that the
values of test statistic be saved to disk every {it:#}-th repetition; see help
{help postfile}.

{p 0 4}{cmd:replace} indicates that the file specified by {cmd:post()} 
may already exist and,
if it does, it can be erased and replaced by a new one.

{p 0 4}{cmd:leavemore} indicates that {help more} not be changed within
{cmd:permute}.  The default is to {cmd:set more off} before simulation and
{cmd: set more on} before exiting.

{title:Remarks}

{p}{cmd:permute} works faster when {it:varname1} is a 0/1 variable 
(with no missing values).
So, if using a 0/1 variable, specify it as the one to be permuted.

{title:Guidelines for the program}

{p}{it:progname} must have the following outline:{p_end}
{input}
        program define {it:progname}
                compute {it:test statistic}
                global S_1 = {it:test statistic}
        end
{text}
{p}Arguments to {it:progname} are {it:varname1 varlist}; i.e., 
the same variables that
specified with {cmd:permute} are passed to {it:progname}.

{p} Here is an example of a program that estimates the permutation distribution
p-value for the Pearson correlation coefficient:{p_end}
{input}
        program define permpear
                quietly corr `1' `2'
                global S_1 = r(rho)
        end
{text}
{p}To use this program, call {cmd:permute} using{p_end}

{p 4 8}{inp:. permute permpear x y}{p_end}

{p} In addition, the global macro {cmd:S_1} is set to {cmd:"first"} for the 
first call to
{it:progname}, which computes the observed test statistic T(obs); 
i.e., T(obs) is
the value of the test statistic for the unpermuted data.

{p}Thus, {it:progname} can optionally have the form:{p_end}
{input}
        program define {it:progname} /* args = varname1 [varlist] */
                if "$S_1" == "first" {
                        {it:do initial computations}
                }
                compute {it:test statistic}
                global S_1 = {it:test statistic}
        end
{text}
{p}Here is an example of a program that estimates the permutation distribution
p-value for the two-sample t test:{p_end}
{input}
        program define permt2
                local grp "`1'"
                local x   "`2'"
                tempvar sum
                quietly {
                        if "$S_1"=="first" {
                                gen double `sum' = sum(`x')
                                scalar _TOTAL = `sum'[_N]
                                drop `sum'
                                summarize `grp'
                                scalar _GROUP1 = r(min) 
                                count if `grp'==_GROUP1
                                scalar _TOTAL = (r(N)/_N)*_TOTAL
                        }
                        gen double `sum' = sum((`grp'==_GROUP1)*`x')
                        global S_1 = `sum'[_N] - _TOTAL
                }
        end
{text}
{p} Note that the statistic T = (sum over i in group 1) x_i - n1 * x_bar 
is used,
where x_bar is the mean of the groups combined and n1 is the number of obser-
vations in group 1.  This statistic is equivalent, under the permutation
distribution, to the standard t statistic.

{p}To use this program, call {cmd:permute} using{p_end}

{p 4 8}{inp:. permute permt2 group x}{p_end}

{title:Examples}

{p 4 8}{inp:. permute permpear x y}{p_end}
{p 4 8}{inp:. permute permpear x y, reps(1000)}{p_end}
{p 4 8}{inp:. permute permpear x y, reps(10000) display(100)}{p_end}

{p 4 8}{inp:. permute permpear x y, reps(1000) di(100) post(pearson)}{p_end}
{p 4 8}{inp:. permute permpear x y, reps(10000) di(1000) post(pearson) /* }
{p_end}
{p 4 8}{inp:  {space 8}    */ replace every(1000) double}{p_end}

{p 4 8}{inp:. permute permt2 group x}{p_end}
{p 4 8}{inp:. permute permt2 group x, left}{p_end}

{p 4 8}{inp:. permute panova treat outcome subject, by(subject) reps(1000)}

{title:Authors}

William Sribney, StataCorp, 1998.
Converted to Stata version 7 code by Roberto Gutierrez, StataCorp, 2001.

{title:Also see}

 Manual:  {hi: [R] simul}, {hi: [R] postfile}
On-line:  help for {help postfile}, {help simul}, {help perm}
